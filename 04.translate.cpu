#!/bin/bash
set -euo pipefail

SLANG="$1"
BATCH="$2"

echo "Translating $SLANG $BATCH"
echo "Input size:" `ls -lh $BATCH/sentences.gz | cut -d' ' -f5` $BATCH
sentences=`gzip -dc $BATCH/sentences.gz | base64 -d | wc -l`
echo "Sentences: ${sentences}"

set -a # I want the variables from translate.sh to be available in my deep deep down bash
. ${SCRIPTS}/translate.sh
eval model_${SLANG} || (echo No model for ${SLANG} 1>&2 ; exit 255)

# Copy model to local machine

MDIR="`dirname $MODEL`"
MNAME="`basename $MODEL`"
MODEL="${SCRATCH}/${MNAME}"

cleanup () {
	echo "Cleaning up..."
	rm -rf ${MODEL}
	echo "Clean up done."
}
trap cleanup EXIT

echo "Copying translation model ${MODEL} to scratch space"
(cd "${MDIR}" && tar -cf - "${MNAME}") | (cd "${SCRATCH}" && tar -xvf -)

# Determine a good initial batch size for parallel

bsize=$(($sentences / 64))
if test $(($sentences % 64)) -ne 0; then
	bsize=$(($bsize + 1))
fi
echo "Using a sentence batch size of ${bsize}"
nmosi=16
echo "Using ${nmosi} Mosi with ${MOSES_ARGS}"

# Go!

echo "Start:" `date` $BATCH

export -f translate_moses
gzip -dc ${BATCH}/sentences.gz \
	| b64filter \
		cache \
			parallel --halt 2 -j ${nmosi} --pipe -k -l ${bsize} \
				'bash -u -e -o pipefail -c '"'"'translate_moses $@'"'"' --' $SLANG \
	| gzip -9c > /tmp/sentences_en.$$.gz

echo "End:" `date` $BATCH

before=`gzip -dc ${BATCH}/sentences.gz | wc -l`
after=`gzip -dc /tmp/sentences_en.$$.gz | wc -l`
echo "Check count $before -> $after $BATCH"
if [[ $before != $after ]]; then
	echo "Error: counts don't match"
	exit 1
fi

mv /tmp/sentences_en.$$.gz ${BATCH}/sentences_en.gz